# –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
# –ø–∞—Ä—Å–∏–º + —Ä–∞–∑–±–∏—Ä–∞–µ–º
import requests
import json
import os
from dotenv import load_dotenv, find_dotenv
# –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
import sqlite3

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('my_database.db')
cursor = conn.cursor()

cursor.execute(''' 
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE,
    chat_id INTEGER
)
''')
conn.commit()
conn.close()

# –¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ –±–¥
def add_user_to_db(username, chat_id):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    cursor.execute('SELECT * FROM users WHERE username = ?', (username,))
    existing_user = cursor.fetchone()

    if existing_user:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ.")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        cursor.execute('''
        INSERT INTO users (username, chat_id)
        VALUES (?, ?)
        ''', (username, chat_id))

        conn.commit()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.")

    conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_all_users_from_db():
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM users')
    rows = cursor.fetchall()
    conn.close()

    return rows

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
load_dotenv(find_dotenv())
bot = telebot.TeleBot(os.getenv('telebot_token'))

catalog_list = InlineKeyboardMarkup(row_width=2)
catalog_list.add(InlineKeyboardButton(text='üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', callback_data='greetings'),
                 InlineKeyboardButton(text='‚õÖ –ü–æ–≥–æ–¥–∞', callback_data='weather'),
                 InlineKeyboardButton(text='üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data='users'))

@bot.message_handler(commands=['start'])
def start(message):
    add_user_to_db(message.from_user.username, message.chat.id)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.')
    bot.send_message(message.chat.id, '–ê —Ç–∞–∫–∂–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã!', reply_markup=catalog_list)

def menu_replier(message):
    bot.send_message(message.chat.id, '–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—É–Ω–∫—Ç–∞–º–∏ –º–µ–Ω—é!', reply_markup=catalog_list)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call: CallbackQuery):
    if call.data == 'greetings':
        bot.send_message(call.message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–≤–æ–π –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç!")
        menu_replier(call.message)
        bot.answer_callback_query(call.id)
    if call.data == 'weather':
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.")
        bot.register_next_step_handler(call.message, get_weather)
        bot.answer_callback_query(call.id)
    if call.data == 'users':
        users = get_all_users_from_db()
        if users:
            response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            for user in users:
                response += f"–ò–º—è: {user[1]}, ID: {user[2]}\n"
        else:
            response = "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        bot.send_message(call.message.chat.id, response)
        bot.answer_callback_query(call.id)

@bot.message_handler(content_types=['text'])
def get_weather(message):
    city = message.text.strip().lower()
    result = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={os.getenv("open_weather_token")}&units=metric')
    if result.status_code == 200:
        data = json.loads(result.text)
        bot.reply_to(message, f'–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å: {data["main"]["temp"]}¬∞C')
        menu_replier(message)
    else:
        bot.reply_to(message, f'–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥!')
        menu_replier(message)

bot.polling(non_stop=True)
