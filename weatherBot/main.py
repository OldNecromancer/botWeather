# —á—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª
from email.policy import default

import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

# –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–ø–∏ –æ–ø–µ–Ω–≤–µ–∑–µ—Ä
import requests
import json

# –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
import os
from dotenv import load_dotenv, find_dotenv

load_dotenv(find_dotenv())

bot = telebot.TeleBot(os.getenv('telebot_token'))
account_home = 'default';

catalog_list = InlineKeyboardMarkup(row_width=2)
catalog_list.add(InlineKeyboardButton(text='üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', callback_data='greetings'),
                 InlineKeyboardButton(text='‚õÖ –ü–æ–≥–æ–¥–∞ –≤ –º–∏—Ä–µ', callback_data='weather'),
                 InlineKeyboardButton(text='‚õ™ –ú–æ—è –ø–æ–≥–æ–¥–∞',  callback_data='my_weather'))

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã!', reply_markup=catalog_list)

def answer(message):
    bot.send_message(message.chat.id, '–ú–æ–≥—É –ª–∏ —è –ø–æ–º–æ—á—å —á–µ–º-—Ç–æ –µ—â–µ?', reply_markup=catalog_list)

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call: CallbackQuery):
    if call.data == 'greetings':
        bot.send_message(call.message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–≤–æ–π –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç!")
        bot.register_next_step_handler(call.message, answer)
    if call.data == 'weather':
        bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.")
        bot.register_next_step_handler(call.message, get_weather)
    if call.data == 'my_weather':
        if account_home == 'default':
            bot.send_message(call.message.chat.id, "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ–¥–Ω–æ–π –≥–æ—Ä–æ–¥")
            account_home = message.text.strip().lower()
        if account_home != 'default':
            bot.register_next_step_handler(call.message, get_weather_by_hometown)

@bot.message_handler(content_types=['text'])
def get_weather(message):
    city = message.text.strip().lower()
    result = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={os.getenv("open_weather_token")}&units=metric')
    if result.status_code == 200:
        data = json.loads(result.text)
        bot.reply_to(message, f'–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å: {data["main"]["temp"]}¬∞C')
        bot.register_next_step_handler(message, answer)
    else:
        bot.reply_to(message, f'–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥!')
        bot.register_next_step_handler(message, answer)

def get_weather_by_hometown(message):
    account_home = message.text.strip().lower()
    result = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={account_home}&appid={os.getenv("open_weather_token")}&units=metric')
    if result.status_code == 200:
        data = json.loads(result.text)
        bot.reply_to(message, f'–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å: {data["main"]["temp"]}¬∞C')
        bot.register_next_step_handler(message, answer)
    else:
        bot.reply_to(message, f'–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥!')
        bot.register_next_step_handler(message, answer)

bot.polling(non_stop=True)
